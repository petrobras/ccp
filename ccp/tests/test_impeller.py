import pytest
import numpy as np
import pickle
from pathlib import Path
from tempfile import tempdir
from numpy.testing import assert_allclose

import ccp
from ccp import ureg, Q_, State, Point, Curve, Impeller, impeller_example


@pytest.fixture
def points0():
    #  see Ludtke pg. 173 for values.
    fluid = dict(
        n2=0.0318,
        co2=0.0118,
        methane=0.8737,
        ethane=0.0545,
        propane=0.0178,
        ibutane=0.0032,
        nbutane=0.0045,
        ipentane=0.0011,
        npentane=0.0009,
        nhexane=0.0007,
    )
    suc = State(p=Q_(62.7, "bar"), T=Q_(31.2, "degC"), fluid=fluid)
    disch = State(p=Q_(76.82, "bar"), T=Q_(48.2, "degC"), fluid=fluid)
    disch1 = State(p=Q_(76.0, "bar"), T=Q_(48.0, "degC"), fluid=fluid)
    p0 = Point(
        suc=suc,
        disch=disch,
        flow_m=85.9,
        speed=Q_(13971, "RPM"),
        b=Q_(44.2, "mm"),
        D=0.318,
    )
    p1 = Point(
        suc=suc,
        disch=disch1,
        flow_m=86.9,
        speed=Q_(13971, "RPM"),
        b=Q_(44.2, "mm"),
        D=0.318,
    )
    return p0, p1


@pytest.fixture
def imp0(points0):
    p0, p1 = points0
    imp0 = Impeller([p0, p1])
    return imp0


@pytest.fixture
def imp1():
    fluid = dict(
        methane=0.69945,
        ethane=0.09729,
        propane=0.0557,
        nbutane=0.0178,
        ibutane=0.0102,
        npentane=0.0039,
        ipentane=0.0036,
        nhexane=0.0018,
        n2=0.0149,
        co2=0.09259,
        h2s=0.00017,
        water=0.002,
    )
    suc = State(p=Q_(1.6995, "MPa"), T=311.55, fluid=fluid)

    p0 = Point(
        suc=suc,
        flow_v=Q_(6501.67, "m**3/h"),
        speed=Q_(11145, "RPM"),
        head=Q_(179.275, "kJ/kg"),
        eff=0.826357,
        b=Q_(28.5, "mm"),
        D=Q_(365, "mm"),
    )
    p1 = Point(
        suc=suc,
        flow_v=Q_(7016.72, "m**3/h"),
        speed=Q_(11145, "RPM"),
        head=Q_(173.057, "kJ/kg"),
        eff=0.834625,
        b=Q_(28.5, "mm"),
        D=Q_(365, "mm"),
    )

    imp1 = Impeller([p0, p1])

    return imp1


def test_impeller_new_suction(imp1):
    new_suc = State(p=Q_(0.2, "MPa"), T=301.58, fluid={"n2": 1 - 1e-15, "co2": 1e-15})
    imp2 = Impeller.convert_from(imp1, suc=new_suc, find="speed")
    p0 = imp1[0]
    new_p0 = imp2[0]

    assert_allclose(new_p0.eff.m, p0.eff.m, rtol=1e-4)
    assert_allclose(new_p0.phi.m, p0.phi.m, rtol=1e-2)
    assert_allclose(new_p0.psi.m, p0.psi.m, rtol=1e-2)
    assert_allclose(new_p0.head.m, 206048.241451, rtol=1e-2)
    assert_allclose(new_p0.power.m, 1079069.932152, rtol=1e-2)
    assert_allclose(new_p0.speed.m, 1251.21885813, rtol=1e-3)


@pytest.fixture()
def imp2():
    points = [
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1263 rad/s"),
            flow_v=Q_("1.15 m³/s"),
            head=Q_("147634 J/kg"),
            eff=Q_("0.819"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1263 rad/s"),
            flow_v=Q_("1.26 m³/s"),
            head=Q_("144664 J/kg"),
            eff=Q_("0.829"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1263 rad/s"),
            flow_v=Q_("1.36 m³/s"),
            head=Q_("139945 J/kg"),
            eff=Q_("0.831"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1337 rad/s"),
            flow_v=Q_("1.22 m³/s"),
            head=Q_("166686 J/kg"),
            eff=Q_("0.814"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1337 rad/s"),
            flow_v=Q_("1.35 m³/s"),
            head=Q_("163620 J/kg"),
            eff=Q_("0.825"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1337 rad/s"),
            flow_v=Q_("1.48 m³/s"),
            head=Q_("158536 J/kg"),
            eff=Q_("0.830"),
            b=0.010745,
            D=0.32560,
        ),
    ]

    imp2 = Impeller(points)

    return imp2


def test_impeller_disch_state(imp2):
    T_magnitude = np.array(
        [[482.851207, 477.244663, 471.296077], [506.669295, 500.419423, 493.31087]]
    )
    assert_allclose(
        imp2.disch.T().magnitude,
        T_magnitude,
        rtol=1e-6,
    )


def test_impeller2_new_suction(imp2):
    new_suc = State(p=Q_(0.2, "MPa"), T=301.58, fluid={"n2": 1 - 1e-15, "co2": 1e-15})
    imp2_new = Impeller.convert_from(imp2, suc=new_suc, find="speed")
    p0 = imp2[0]
    new_p0 = imp2_new[0]

    assert_allclose(new_p0.eff.m, p0.eff.m, rtol=1e-4)
    assert_allclose(new_p0.phi.m, p0.phi.m, rtol=1e-2)
    assert_allclose(new_p0.psi.m, p0.psi.m, rtol=1e-2)
    assert_allclose(new_p0.head.m, 151889.637082, rtol=1e-2)
    assert_allclose(new_p0.power.m, 483519.884306, rtol=1e-2)
    assert_allclose(new_p0.speed.m, 1281.074036, rtol=1e-3)
    assert_allclose(new_p0.mach_diff.m, 5.896879e-05, rtol=1e-3)
    assert_allclose(new_p0.reynolds_ratio.m, 1.000121, rtol=1e-3)
    assert_allclose(new_p0.volume_ratio_ratio.m, 1.000154, rtol=1e-5)


@pytest.fixture
def imp3():
    # faster to load than impeller_example
    composition_fd = dict(
        n2=0.4,
        co2=0.22,
        methane=92.11,
        ethane=4.94,
        propane=1.71,
        ibutane=0.24,
        butane=0.3,
        ipentane=0.04,
        pentane=0.03,
        hexane=0.01,
    )
    suc_fd = State(p=Q_(3876, "kPa"), T=Q_(11, "degC"), fluid=composition_fd)

    test_dir = Path(__file__).parent
    curve_path = test_dir / "data"
    curve_name = "normal"

    imp3 = Impeller.load_from_engauge_csv(
        suc=suc_fd,
        curve_name=curve_name,
        curve_path=curve_path,
        b=Q_(10.6, "mm"),
        D=Q_(390, "mm"),
        number_of_points=6,
        flow_units="kg/h",
        head_units="kJ/kg",
    )
    return imp3


def test_impeller_point(imp3):
    p0 = imp3.point(flow_m=Q_(90184, "kg/h"), speed=Q_(9300, "RPM"))
    assert_allclose(p0.eff.m, 0.782169, rtol=1e-4)
    assert_allclose(p0.head.m, 97729.49349, rtol=1e-4)
    assert_allclose(p0.power.m, 3130330.074989, rtol=1e-4)

    # test interpolation warning
    with pytest.warns(UserWarning) as record:
        p0 = imp3.point(flow_m=Q_(70000, "kg/h"), speed=Q_(9300, "RPM"))
        assert "Expected point is being extrapolated" in record[0].message.args[0]


def test_conversion(imp3):
    new_suc = ccp.State(p=Q_(2000, "kPa"), T=300, fluid={"co2": 1})
    new_imp3 = ccp.Impeller.convert_from(imp3, suc=new_suc)

    # fmt: off
    expected_data = (
        {
            'name': '5827.0 RPM',
            'x': np.array([0.4190198508426469, 0.4311987081109055, 0.44337756537916406, 0.4555564226474227, 0.46773527991568126, 0.4799141371839398, 0.4920929944521984, 0.504271851720457, 0.5164507089887156, 0.5286295662569741, 0.5408084235252327, 0.5529872807934912, 0.5651661380617499, 0.5773449953300085, 0.589523852598267, 0.6017027098665256, 0.6138815671347841, 0.6260604244030428, 0.6382392816713014, 0.6504181389395599, 0.6625969962078185, 0.674775853476077, 0.6869547107443357, 0.6991335680125943, 0.7113124252808528, 0.7234912825491114, 0.73567013981737, 0.7478489970856286, 0.7600278543538872, 0.7722067116221457]),
            'y': np.array([39264.273365307454, 39322.33661582809, 39283.06529984037, 39156.13796325681, 38951.23315198991, 38678.02941195218, 38346.20528905613, 37965.43932921427, 37545.410078339104, 37095.79608234315, 36626.27588713889, 36146.52803863886, 35666.0466358034, 35187.155402327655, 34702.86349082275, 34205.55754543621, 33687.62421031562, 33141.450129608544, 32559.62917870128, 31937.85602633043, 31274.212338093766, 30566.84118143759, 29813.885623808193, 29013.488732651887, 28163.793575415006, 27262.943219543813, 26309.080732484632, 25300.349181683756, 24234.891634587504, 23110.851158642177])
        },
        {
            'name': '6532.0 RPM',
            'x': np.array([0.469458006645204, 0.48383624059003566, 0.4982144745348674, 0.5125927084796991, 0.5269709424245308, 0.5413491763693625, 0.5557274103141941, 0.5701056442590259, 0.5844838782038576, 0.5988621121486892, 0.613240346093521, 0.6276185800383527, 0.6419968139831844, 0.656375047928016, 0.6707532818728478, 0.6851315158176795, 0.6995097497625111, 0.7138879837073429, 0.7282662176521746, 0.7426444515970063, 0.757022685541838, 0.7714009194866697, 0.7857791534315014, 0.800157387376333, 0.8145356213211647, 0.8289138552659965, 0.8432920892108282, 0.8576703231556599, 0.8720485571004916, 0.8864267910453233]),
            'y': np.array([49214.16903056795, 49320.58109692963, 49290.9459462995, 49138.498726322374, 48876.47458464301, 48518.10866890628, 48076.63612675692, 47565.29210583974, 46997.31175379957, 46385.93021828119, 45744.3826469294, 45085.90418738897, 44423.48528588077, 43760.603620767804, 43088.37944850144, 42397.10715822706, 41677.08113909004, 40918.59578023579, 40112.16784313982, 39251.64143821778, 38333.422075688206, 37353.981153867426, 36309.7900710718, 35197.32022561769, 34013.04301582143, 32753.42983999936, 31414.952096467863, 29994.08118354327, 28487.288499541944, 26891.045442780225])
        },
        {
            'name': '7077.0 RPM',
            'x': np.array([0.5109936997319773, 0.5264038074677687, 0.5418139152035603, 0.5572240229393517, 0.5726341306751431, 0.5880442384109346, 0.6034543461467261, 0.6188644538825175, 0.634274561618309, 0.6496846693541005, 0.665094777089892, 0.6805048848256834, 0.6959149925614749, 0.7113251002972664, 0.7267352080330578, 0.7421453157688492, 0.7575554235046407, 0.7729655312404322, 0.7883756389762236, 0.8037857467120151, 0.8191958544478066, 0.8346059621835981, 0.8500160699193895, 0.865426177655181, 0.8808362853909725, 0.8962463931267639, 0.9116565008625555, 0.9270666085983468, 0.9424767163341383, 0.9578868240699298]),
            'y': np.array([57531.43020377315, 57624.18892868013, 57579.793896197356, 57410.12140839996, 57127.0477673631, 56742.44927516194, 56268.20223387163, 55716.18294556733, 55098.2677123242, 54426.3328362174, 53712.25461932208, 52967.909363713414, 52204.966857067244, 51427.06863978748, 50627.42727511435, 49798.55834019047, 48932.97741215855, 48023.200068161226, 47061.87655543159, 46043.67218477795, 44964.803466939, 43821.52681490253, 42610.09864165624, 41326.775360187865, 39967.813383485176, 38529.46912453589, 37007.99899632774, 35399.65941184849, 33700.70678408585, 31907.397526027584])
        }
    )
    # fmt: on
    fig = new_imp3.head_plot()
    for exp_data, act_data in zip(expected_data, fig.data):
        assert exp_data["name"] == act_data["name"]
        assert_allclose(exp_data["x"], act_data["x"])
        assert_allclose(exp_data["y"], act_data["y"])


def test_conversion_same_speed(imp3):
    new_suc = ccp.State(p=Q_(2000, "kPa"), T=300, fluid={"co2": 1})
    new_imp3 = ccp.Impeller.convert_from(imp3, suc=new_suc, speed="same")

    # fmt: off
    expected_data = (
        {
            'name': '9300.0 RPM',
            'x': np.array([0.68051612, 0.70013768, 0.71975924, 0.73938081, 0.75900237,
                        0.77862393, 0.7982455 , 0.81786706, 0.83748863, 0.85711019,
                        0.87673175, 0.89635332, 0.91597488, 0.93559644, 0.95521801,
                        0.97483957, 0.99446113, 1.0140827 , 1.03370426, 1.05332582,
                        1.07294739, 1.09256895, 1.11219052, 1.13181208, 1.15143364,
                        1.17105521, 1.19067677, 1.21029833, 1.2299199 , 1.24954146]),
            'y': np.array([86982.70700808, 87022.67408055, 86917.43978188, 86675.2265118 ,
                        86304.25667004, 85812.75265632, 85208.93687036, 84501.03171188,
                        83697.25958061, 82805.84287627, 81835.00399858, 80792.96534728,
                        79687.85104981, 78523.96489948, 77300.64794037, 76016.90954769,
                        74671.75909665, 73264.20596245, 71793.13352053, 70255.53981647,
                        68646.97156521, 66962.9381484 , 65198.94894772, 63350.51334481,
                        61413.14072136, 59382.34045901, 57253.62193945, 55022.49454432,
                        52684.46765529, 50235.05065403])
        },
        {
            'name': '10463.0 RPM',
            'x': np.array([0.7691978 , 0.79102248, 0.81284717, 0.83467186, 0.85649655,
                        0.87832124, 0.90014592, 0.92197061, 0.9437953 , 0.96561999,
                        0.98744468, 1.00926936, 1.03109405, 1.05291874, 1.07474343,
                        1.09656812, 1.1183928 , 1.14021749, 1.16204218, 1.18386687,
                        1.20569156, 1.22751624, 1.24934093, 1.27116562, 1.29299031,
                        1.314815  , 1.33663968, 1.35846437, 1.38028906, 1.40211375]),
            'y': np.array([100689.64712449, 100704.80957282, 100569.24301538, 100289.84380138,
                        99873.50828004,  99327.13280057,  98657.61371219,  97871.84736411,
                        96976.73010553,  95979.15828569,  94886.02825378,  93704.23635903,
                        92440.62358043,  91099.87837983,  89683.89302314,  88194.37290182,
                        86633.02340732,  85001.54993107,  83301.42440275,  81530.62547221,
                        79684.44265553,  77758.09629495,  75746.80673272,  73645.79431107,
                        71450.27937225,  69155.48225848,  66756.62331202,  64248.9228751 ,
                        61627.60128995,  58887.87889882])
        },
        {
            'name': '11373.0 RPM',
            'x': np.array([0.83858759, 0.86213613, 0.88568467, 0.90923322, 0.93278176,
                        0.9563303 , 0.97987884, 1.00342739, 1.02697593, 1.05052447,
                        1.07407302, 1.09762156, 1.1211701 , 1.14471865, 1.16826719,
                        1.19181573, 1.21536427, 1.23891282, 1.26246136, 1.2860099 ,
                        1.30955845, 1.33310699, 1.35665553, 1.38020407, 1.40375262,
                        1.42730116, 1.4508497 , 1.47439825, 1.49794679, 1.52149533]),
            'y': np.array([110904.91856473, 110902.2332679 , 110744.15718075, 110436.68531694,
                        109985.81269015, 109397.53431404, 108677.8452023 , 107832.7403686 ,
                        106868.2148266 , 105790.26358999, 104604.88167244, 103318.06408761,
                        101935.78090928, 100463.03267223,  98903.56044586,  97261.02112733,
                        95539.07161385,  93741.36880259,  91871.25937571,  89927.44827916,
                        87905.0672412 ,  85799.15607452,  83604.75459181,  81316.90260575,
                        78930.63992902,  76441.00637433,  73843.04175436,  71131.78588179,
                        68302.27856931,  65349.55962962])
        }
    )
    # fmt: on
    fig = new_imp3.head_plot()
    for exp_data, act_data in zip(expected_data, fig.data):
        assert exp_data["name"] == act_data["name"]
        assert_allclose(exp_data["x"], act_data["x"])
        assert_allclose(exp_data["y"], act_data["y"])


def test_impeller_from_head_power(imp3):
    power_curves = {
        "9300": {
            "x1": [
                0.6687254072219386,
                0.7814575495418031,
                0.8941896918616675,
                1.0069218341815322,
                1.1196539765013964,
                1.2323861188212613,
            ],
            "x2": [
                2845523.5289321193,
                3127163.481562522,
                3277265.886285639,
                3346260.869968239,
                3319180.7261240287,
                3142302.6300651073,
            ],
            "x3": 0,
        },
        "10463": {
            "x1": [
                0.7519675035883937,
                0.8855457880957917,
                1.0191240726031896,
                1.1527023571105877,
                1.2862806416179855,
                1.4198589261253836,
            ],
            "x2": [
                4039983.5025886875,
                4470035.337140464,
                4679947.907538627,
                4766159.261322699,
                4692484.023962905,
                4371204.02452897,
            ],
            "x3": 0,
        },
        "11373": {
            "x1": [
                0.8212056071200831,
                0.9648438318896764,
                1.1084820566592695,
                1.2521202814288628,
                1.3957585061984559,
                1.5393967309680492,
            ],
            "x2": [
                5186828.999320385,
                5736177.6673671715,
                6014264.5749985445,
                6112605.998368464,
                6014767.215796105,
                5638319.478855415,
            ],
            "x3": 0,
        },
    }
    head_curves = {
        "9300": {
            "x1": [
                0.6687254072219386,
                0.7814575495418031,
                0.8941896918616675,
                1.0069218341815322,
                1.1196539765013964,
                1.2323861188212613,
            ],
            "x2": [
                100005.53018307277,
                97847.01562084591,
                91329.28298253928,
                83829.8663013647,
                73474.29567438488,
                58862.99999999999,
            ],
            "x3": 0,
        },
        "10463": {
            "x1": [
                0.7519675035883937,
                0.8855457880957917,
                1.0191240726031896,
                1.1527023571105877,
                1.2862806416179855,
                1.4198589261253836,
            ],
            "x2": [
                126268.4360992984,
                123591.84090157163,
                114656.18023528619,
                104172.92098119784,
                89712.83917676227,
                68994.16001570634,
            ],
            "x3": 0,
        },
        "11373": {
            "x1": [
                0.8212056071200831,
                0.9648438318896764,
                1.1084820566592695,
                1.2521202814288628,
                1.3957585061984559,
                1.5393967309680492,
            ],
            "x2": [
                148586.0,
                145585.48779110302,
                135621.6175049271,
                123053.00341798295,
                106048.3388840925,
                82407.00000000001,
            ],
            "x3": 0,
        },
    }

    imp = Impeller.load_from_dict(
        suc=imp3.points[0].suc,
        b=imp3.points[0].b,
        D=imp3.points[0].D,
        head_curves=head_curves,
        power_curves=power_curves,
        number_of_points=6,
        flow_units="m³/s",
        head_units="J/kg",
    )

    assert_allclose(imp.head.m, imp3.head.m)
    assert_allclose(imp.power.m, imp3.power.m)
    assert_allclose(imp.eff.m, imp3.eff.m)


def test_impeller_curve():
    imp = impeller_example()
    c0 = imp.curve(speed=900)
    p0 = c0[0]
    assert_allclose(p0.eff.m, 0.821433, rtol=1e-4)
    assert_allclose(p0.head.m, 137188.459805, rtol=1e-4)
    assert_allclose(p0.power.m, 2959311.563661, rtol=1e-4)


def test_impeller_plot():
    imp = impeller_example()
    fig = imp.eff_plot(flow_v=5, speed=900)
    expected_eff_curve = np.array(
        [
            0.82151127,
            0.82251957,
            0.82336076,
            0.82403621,
            0.8245473,
            0.82489539,
            0.82508188,
            0.82510812,
            0.82497549,
            0.82468537,
            0.82423886,
            0.82362078,
            0.82279067,
            0.82170594,
            0.82032399,
            0.81860513,
            0.81657752,
            0.81433706,
            0.81198262,
            0.80961307,
            0.8072946,
            0.80471372,
            0.80131193,
            0.79652665,
            0.78979533,
            0.78055539,
            0.76824427,
            0.75229938,
            0.73215817,
            0.70725806,
        ]
    )
    assert_allclose(fig.data[5]["y"], expected_eff_curve, rtol=1e-4)
    assert_allclose(fig.data[6]["y"], 0.8160188823236803, rtol=1e-4)


def test_impeller_plot_units():
    imp = impeller_example()
    fig = imp.disch.rho_plot(
        flow_v=Q_(20000, "m³/h"),
        speed=Q_(8594, "RPM"),
        flow_v_units="m³/h",
        speed_units="RPM",
        rho_units="g/cm³",
    )
    expected_rho_curve = np.array(
        [
            0.01104813,
            0.01102036,
            0.01099158,
            0.01096116,
            0.01092849,
            0.01089295,
            0.01085392,
            0.01081078,
            0.01076293,
            0.01070972,
            0.01065057,
            0.01058551,
            0.0105156,
            0.01044197,
            0.01036576,
            0.01028808,
            0.01020935,
            0.01012928,
            0.01004757,
            0.0099639,
            0.00987771,
            0.00978529,
            0.00968094,
            0.00955889,
            0.00941342,
            0.00923877,
            0.0090292,
            0.00877895,
            0.0084823,
            0.00813349,
        ]
    )
    assert_allclose(fig.data[5]["y"], expected_rho_curve, rtol=1e-4)
    assert_allclose(fig.data[6]["y"], 0.008981197060142207, rtol=1e-4)


def test_save_load():
    composition_fd = dict(
        n2=0.4,
        co2=0.22,
        methane=92.11,
        ethane=4.94,
        propane=1.71,
        ibutane=0.24,
        butane=0.3,
        ipentane=0.04,
        pentane=0.03,
        hexane=0.01,
    )
    suc_fd = State(p=Q_(3876, "kPa"), T=Q_(11, "degC"), fluid=composition_fd)

    test_dir = Path(__file__).parent
    curve_path = test_dir / "data"
    curve_name = "normal"

    imp_fd = Impeller.load_from_engauge_csv(
        suc=suc_fd,
        curve_name=curve_name,
        curve_path=curve_path,
        b=Q_(10.6, "mm"),
        D=Q_(390, "mm"),
        number_of_points=6,
        flow_units="kg/h",
        head_units="kJ/kg",
    )
    file = Path(tempdir) / "imp.toml"
    imp_fd.save(file)

    imp_fd_loaded = Impeller.load(file)

    assert imp_fd == imp_fd_loaded
    assert hash(imp_fd) == hash(imp_fd_loaded)


def test_load_from_dict_isis():
    head_curves_dict = {
        "CURVES": [
            {
                "z": 11373,
                "points": [
                    {"x": 94529, "y": 148.586},
                    {"x": 98641, "y": 148.211},
                    {"x": 101554, "y": 147.837},
                    {"x": 105837, "y": 147.463},
                    {"x": 110120, "y": 145.967},
                    {"x": 114230, "y": 144.097},
                    {"x": 118167, "y": 141.479},
                    {"x": 130152, "y": 134.001},
                    {"x": 134089, "y": 131.384},
                    {"x": 138026, "y": 128.393},
                    {"x": 140080, "y": 126.523},
                    {"x": 144016, "y": 123.158},
                    {"x": 150177, "y": 117.176},
                    {"x": 153942, "y": 113.811},
                    {"x": 157705, "y": 109.698},
                    {"x": 160100, "y": 106.708},
                    {"x": 163693, "y": 102.595},
                    {"x": 167113, "y": 97.735},
                    {"x": 170190, "y": 92.875},
                    {"x": 173609, "y": 87.641},
                    {"x": 177200, "y": 82.407},
                ],
            },
            {
                "z": 10463,
                "points": [
                    {"x": 86421, "y": 126.284},
                    {"x": 90209, "y": 125.784},
                    {"x": 94492, "y": 125.036},
                    {"x": 98604, "y": 124.661},
                    {"x": 100146, "y": 124.287},
                    {"x": 104256, "y": 122.417},
                    {"x": 110077, "y": 118.678},
                    {"x": 114187, "y": 116.435},
                    {"x": 118125, "y": 114.191},
                    {"x": 122063, "y": 111.948},
                    {"x": 126172, "y": 109.33},
                    {"x": 130109, "y": 106.339},
                    {"x": 134045, "y": 102.974},
                    {"x": 137639, "y": 99.609},
                    {"x": 140206, "y": 97.366},
                    {"x": 143971, "y": 94.001},
                    {"x": 147907, "y": 89.888},
                    {"x": 150130, "y": 87.271},
                    {"x": 153722, "y": 82.411},
                    {"x": 156458, "y": 78.672},
                    {"x": 160049, "y": 73.812},
                    {"x": 163469, "y": 68.952},
                ],
            },
            {
                "z": 9300,
                "points": [
                    {"x": 76859, "y": 100.028},
                    {"x": 81085, "y": 99.245},
                    {"x": 85368, "y": 98.497},
                    {"x": 89309, "y": 98.122},
                    {"x": 90166, "y": 97.748},
                    {"x": 94276, "y": 96.252},
                    {"x": 98386, "y": 94.009},
                    {"x": 102152, "y": 91.765},
                    {"x": 106262, "y": 89.522},
                    {"x": 110200, "y": 87.278},
                    {"x": 114310, "y": 85.035},
                    {"x": 118075, "y": 82.043},
                    {"x": 122184, "y": 79.052},
                    {"x": 126121, "y": 76.061},
                    {"x": 130056, "y": 72.322},
                    {"x": 133821, "y": 68.584},
                    {"x": 137241, "y": 64.097},
                    {"x": 141860, "y": 58.863},
                ],
            },
        ]
    }

    eff_curves_dict = {
        "CURVES": [
            {
                "z": 11373,
                "points": [
                    {"x": 94088, "y": 0.7515},
                    {"x": 97345, "y": 0.757113},
                    {"x": 104205, "y": 0.771707},
                    {"x": 107462, "y": 0.777695},
                    {"x": 110718, "y": 0.78256},
                    {"x": 114315, "y": 0.786678},
                    {"x": 117570, "y": 0.789673},
                    {"x": 121508, "y": 0.792669},
                    {"x": 134869, "y": 0.805772},
                    {"x": 138805, "y": 0.806898},
                    {"x": 142741, "y": 0.806527},
                    {"x": 145648, "y": 0.805033},
                    {"x": 149581, "y": 0.802044},
                    {"x": 150094, "y": 0.80167},
                    {"x": 153854, "y": 0.797933},
                    {"x": 157443, "y": 0.793073},
                    {"x": 160005, "y": 0.788213},
                    {"x": 162907, "y": 0.781856},
                    {"x": 165295, "y": 0.774377},
                    {"x": 167001, "y": 0.768768},
                    {"x": 169046, "y": 0.76054},
                    {"x": 172792, "y": 0.742214},
                    {"x": 174494, "y": 0.733613},
                    {"x": 177637, "y": 0.717055},
                ],
            },
            {
                "z": 10463,
                "points": [
                    {"x": 86559, "y": 0.751493},
                    {"x": 89817, "y": 0.757855},
                    {"x": 92732, "y": 0.764216},
                    {"x": 95820, "y": 0.7717},
                    {"x": 98735, "y": 0.777688},
                    {"x": 100449, "y": 0.780681},
                    {"x": 104047, "y": 0.785547},
                    {"x": 107815, "y": 0.788917},
                    {"x": 113125, "y": 0.793784},
                    {"x": 116894, "y": 0.797902},
                    {"x": 122375, "y": 0.803517},
                    {"x": 126484, "y": 0.805765},
                    {"x": 130591, "y": 0.806143},
                    {"x": 135295, "y": 0.804089},
                    {"x": 137945, "y": 0.801847},
                    {"x": 139654, "y": 0.800165},
                    {"x": 143243, "y": 0.79568},
                    {"x": 147000, "y": 0.788576},
                    {"x": 149903, "y": 0.781845},
                    {"x": 152120, "y": 0.774366},
                    {"x": 154761, "y": 0.763521},
                    {"x": 157570, "y": 0.749683},
                    {"x": 159016, "y": 0.740894},
                    {"x": 163440, "y": 0.716584},
                ],
            },
            {
                "z": 9300,
                "points": [
                    {"x": 76977, "y": 0.751485},
                    {"x": 79892, "y": 0.757847},
                    {"x": 80235, "y": 0.758595},
                    {"x": 82809, "y": 0.765704},
                    {"x": 85211, "y": 0.771691},
                    {"x": 87955, "y": 0.778427},
                    {"x": 90184, "y": 0.782169},
                    {"x": 93782, "y": 0.786661},
                    {"x": 97550, "y": 0.790404},
                    {"x": 101319, "y": 0.794522},
                    {"x": 104746, "y": 0.799388},
                    {"x": 110228, "y": 0.805751},
                    {"x": 114336, "y": 0.806877},
                    {"x": 118441, "y": 0.805384},
                    {"x": 124083, "y": 0.800339},
                    {"x": 127500, "y": 0.795105},
                    {"x": 132110, "y": 0.78501},
                    {"x": 136884, "y": 0.767994},
                    {"x": 138586, "y": 0.759392},
                    {"x": 140456, "y": 0.747424},
                    {"x": 141816, "y": 0.738448},
                    {"x": 145226, "y": 0.716758},
                ],
            },
        ]
    }

    composition_fd = dict(
        n2=0.4,
        co2=0.22,
        methane=92.11,
        ethane=4.94,
        propane=1.71,
        ibutane=0.24,
        butane=0.3,
        ipentane=0.04,
        pentane=0.03,
        hexane=0.01,
    )
    suc_fd = State(p=Q_(3876, "kPa"), T=Q_(11, "degC"), fluid=composition_fd)

    imp = ccp.Impeller.load_from_dict_isis(
        suc=suc_fd,
        head_curves=head_curves_dict,
        eff_curves=eff_curves_dict,
        b=Q_(10.6, "mm"),
        D=Q_(390, "mm"),
        number_of_points=6,
        flow_units="kg/h",
        head_units="kJ/kg",
    )
    p0 = imp.point(flow_m=Q_(90184, "kg/h"), speed=Q_(9300, "RPM"))
    assert_allclose(p0.eff.m, 0.782169, rtol=1e-4)
    assert_allclose(p0.head.m, 97729.49349, rtol=1e-4)
    assert_allclose(p0.power.m, 3130330.074989, rtol=1e-4)


def test_pickle(imp0):
    pickled_imp0 = pickle.loads(pickle.dumps(imp0))
    assert pickled_imp0 == imp0
    assert hasattr(imp0, "head_plot") is True
    assert hasattr(pickled_imp0, "head_plot") is True
