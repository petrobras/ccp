import pytest
import numpy as np
import pickle
from pathlib import Path
from tempfile import tempdir
from numpy.testing import assert_allclose

import ccp
from ccp import ureg, Q_, State, Point, Curve, Impeller, impeller_example


@pytest.fixture
def points0():
    #  see Ludtke pg. 173 for values.
    fluid = dict(
        n2=0.0318,
        co2=0.0118,
        methane=0.8737,
        ethane=0.0545,
        propane=0.0178,
        ibutane=0.0032,
        nbutane=0.0045,
        ipentane=0.0011,
        npentane=0.0009,
        nhexane=0.0007,
    )
    suc = State(p=Q_(62.7, "bar"), T=Q_(31.2, "degC"), fluid=fluid)
    disch = State(p=Q_(76.82, "bar"), T=Q_(48.2, "degC"), fluid=fluid)
    disch1 = State(p=Q_(76.0, "bar"), T=Q_(48.0, "degC"), fluid=fluid)
    p0 = Point(
        suc=suc,
        disch=disch,
        flow_m=85.9,
        speed=Q_(13971, "RPM"),
        b=Q_(44.2, "mm"),
        D=0.318,
    )
    p1 = Point(
        suc=suc,
        disch=disch1,
        flow_m=86.9,
        speed=Q_(13971, "RPM"),
        b=Q_(44.2, "mm"),
        D=0.318,
    )
    return p0, p1


@pytest.fixture
def imp0(points0):
    p0, p1 = points0
    imp0 = Impeller([p0, p1])
    return imp0


@pytest.fixture
def imp1():
    fluid = dict(
        methane=0.69945,
        ethane=0.09729,
        propane=0.0557,
        nbutane=0.0178,
        ibutane=0.0102,
        npentane=0.0039,
        ipentane=0.0036,
        nhexane=0.0018,
        n2=0.0149,
        co2=0.09259,
        h2s=0.00017,
        water=0.002,
    )
    suc = State(p=Q_(1.6995, "MPa"), T=311.55, fluid=fluid)

    p0 = Point(
        suc=suc,
        flow_v=Q_(6501.67, "m**3/h"),
        speed=Q_(11145, "RPM"),
        head=Q_(179.275, "kJ/kg"),
        eff=0.826357,
        b=Q_(28.5, "mm"),
        D=Q_(365, "mm"),
    )
    p1 = Point(
        suc=suc,
        flow_v=Q_(7016.72, "m**3/h"),
        speed=Q_(11145, "RPM"),
        head=Q_(173.057, "kJ/kg"),
        eff=0.834625,
        b=Q_(28.5, "mm"),
        D=Q_(365, "mm"),
    )

    imp1 = Impeller([p0, p1])

    return imp1


def test_impeller_new_suction(imp1):
    new_suc = State(p=Q_(0.2, "MPa"), T=301.58, fluid={"n2": 1 - 1e-15, "co2": 1e-15})
    imp2 = Impeller.convert_from(imp1, suc=new_suc, find="speed")
    p0 = imp1[0]
    new_p0 = imp2[0]

    assert_allclose(new_p0.eff, p0.eff, rtol=1e-4)
    assert_allclose(new_p0.phi, p0.phi, rtol=1e-2)
    assert_allclose(new_p0.psi, p0.psi, rtol=1e-2)
    assert_allclose(new_p0.head, 208933.668804, rtol=1e-2)
    assert_allclose(new_p0.power, 1101698.5104, rtol=1e-2)
    assert_allclose(new_p0.speed, 1257.17922, rtol=1e-3)


@pytest.fixture()
def imp2():
    points = [
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1263 rad/s"),
            flow_v=Q_("1.15 m³/s"),
            head=Q_("147634 J/kg"),
            eff=Q_("0.819"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1263 rad/s"),
            flow_v=Q_("1.26 m³/s"),
            head=Q_("144664 J/kg"),
            eff=Q_("0.829"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1263 rad/s"),
            flow_v=Q_("1.36 m³/s"),
            head=Q_("139945 J/kg"),
            eff=Q_("0.831"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1337 rad/s"),
            flow_v=Q_("1.22 m³/s"),
            head=Q_("166686 J/kg"),
            eff=Q_("0.814"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1337 rad/s"),
            flow_v=Q_("1.35 m³/s"),
            head=Q_("163620 J/kg"),
            eff=Q_("0.825"),
            b=0.010745,
            D=0.32560,
        ),
        Point(
            suc=State(p=Q_("100663 Pa"), T=Q_("305 K"), fluid={"AIR": 1.00000}),
            speed=Q_("1337 rad/s"),
            flow_v=Q_("1.48 m³/s"),
            head=Q_("158536 J/kg"),
            eff=Q_("0.830"),
            b=0.010745,
            D=0.32560,
        ),
    ]

    imp2 = Impeller(points)

    return imp2


def test_impeller_disch_state(imp2):
    T_magnitude = np.array(
        [[482.850310, 477.243856, 471.29533], [506.668177, 500.418404, 493.30993]]
    )
    assert_allclose(
        imp2.disch.T().magnitude,
        T_magnitude,
        rtol=1e-6,
    )


def test_impeller2_new_suction(imp2):
    new_suc = State(p=Q_(0.2, "MPa"), T=301.58, fluid={"n2": 1 - 1e-15, "co2": 1e-15})
    imp2_new = Impeller.convert_from(imp2, suc=new_suc, find="speed")
    p0 = imp2[0]
    new_p0 = imp2_new[0]

    assert_allclose(new_p0.eff, p0.eff, rtol=1e-4)
    assert_allclose(new_p0.phi, p0.phi, rtol=1e-2)
    assert_allclose(new_p0.psi, p0.psi, rtol=1e-2)
    assert_allclose(new_p0.head, 151889.637082, rtol=1e-2)
    assert_allclose(new_p0.power, 483519.884306, rtol=1e-2)
    assert_allclose(new_p0.speed, 1281.074036, rtol=1e-3)
    assert_allclose(new_p0.mach_diff, -7.12032e-05, rtol=1e-3)
    assert_allclose(new_p0.reynolds_ratio, 0.999879, rtol=1e-3)
    assert_allclose(new_p0.volume_ratio_ratio, 0.999815, rtol=1e-5)


@pytest.fixture
def imp3():
    # faster to load than impeller_example
    composition_fd = dict(
        n2=0.4,
        co2=0.22,
        methane=92.11,
        ethane=4.94,
        propane=1.71,
        ibutane=0.24,
        butane=0.3,
        ipentane=0.04,
        pentane=0.03,
        hexane=0.01,
    )
    suc_fd = State(p=Q_(3876, "kPa"), T=Q_(11, "degC"), fluid=composition_fd)

    test_dir = Path(__file__).parent
    curve_path = test_dir / "data"
    curve_name = "normal"

    imp3 = Impeller.load_from_engauge_csv(
        suc=suc_fd,
        curve_name=curve_name,
        curve_path=curve_path,
        b=Q_(10.6, "mm"),
        D=Q_(390, "mm"),
        number_of_points=6,
        flow_units="kg/h",
        head_units="kJ/kg",
    )
    return imp3


def test_impeller_point(imp3):
    p0 = imp3.point(flow_m=Q_(90184, "kg/h"), speed=Q_(9300, "RPM"))
    assert_allclose(p0.eff, 0.782169, rtol=1e-4)
    assert_allclose(p0.head, 97729.49349, rtol=1e-4)
    assert_allclose(p0.power, 3130330.074989, rtol=1e-4)

    # test interpolation warning
    with pytest.warns(UserWarning) as record:
        p0 = imp3.point(flow_m=Q_(70000, "kg/h"), speed=Q_(9300, "RPM"))
        assert "Expected point is being extrapolated" in record[0].message.args[0]


def test_conversion(imp3):
    new_suc = ccp.State(p=Q_(2000, "kPa"), T=300, fluid={"co2": 1})
    new_imp3 = ccp.Impeller.convert_from(imp3, suc=new_suc)

    # fmt: off
    expected_data = (
        {
            'name': '5829.0 RPM',
            'x': np.array([0.41912407, 0.43130595, 0.44348784, 0.45566972, 0.46785161, 0.4800335 ,
                        0.49221538, 0.50439727, 0.51657916, 0.52876104, 0.54094293, 0.55312481,
                        0.5653067 , 0.57748859, 0.58967047, 0.60185236, 0.61403425, 0.62621613,
                        0.63839802, 0.65057991, 0.66276179, 0.67494368, 0.68712556, 0.69930745,
                        0.71148934, 0.72367122, 0.73585311, 0.748035  , 0.76021688, 0.77239877]),
            'y': np.array([39283.80670713, 39341.89884318, 39302.60799035, 39175.61750947,
                        38970.61076136, 38697.27110688, 38365.28190684, 37984.32652208,
                        37564.08831344, 37114.25064174, 36644.49686783, 36164.51035252,
                        35683.78991795, 35204.66044382, 34720.12760491, 34222.57425785,
                        33704.38325926, 33157.93746577, 32575.82706833, 31953.74459386,
                        31289.77075361, 30582.04769123, 29828.71755037, 29027.92247469,
                        28177.80460783, 27276.50609346, 26322.16907522, 25312.93569676,
                        24246.94810175, 23122.34843382])
        },
        {
            'name': '6535.0 RPM',
            'x': np.array([0.46967013, 0.48405487, 0.4984396 , 0.51282433, 0.52720906, 0.54159379,
                        0.55597852, 0.57036325, 0.58474798, 0.59913271, 0.61351744, 0.62790217,
                        0.6422869 , 0.65667164, 0.67105637, 0.6854411 , 0.69982583, 0.71421056,
                        0.72859529, 0.74298002, 0.75736475, 0.77174948, 0.78613421, 0.80051894,
                        0.81490367, 0.82928841, 0.84367314, 0.85805787, 0.8724426 , 0.88682733]),
            'y': np.array([49258.65460494, 49365.16285909, 49335.50092071, 49182.91590094,
                        48920.65491092, 48561.96506177, 48120.09346464, 47608.28723064,
                        47039.79347093, 46427.85929662, 45785.73181885, 45126.65814877,
                        44463.64047487, 43800.15961908, 43127.32781127, 42435.43066751,
                        41714.75380388, 40955.58283644, 40148.42595459, 39287.12170435,
                        38368.07234679, 37387.74609066, 36342.61114473, 35229.13571773,
                        34043.78801842, 32783.03625555, 31443.34863786, 30021.19337411,
                        28513.03867304, 26915.35274341])
        },
        {
            'name': '7082.0 RPM',
            'x': np.array([0.51134902, 0.52676984, 0.54219067, 0.55761149, 0.57303231, 0.58845314,
                        0.60387396, 0.61929478, 0.63471561, 0.65013643, 0.66555725, 0.68097808,
                        0.6963989 , 0.71181972, 0.72724055, 0.74266137, 0.75808219, 0.77350302,
                        0.78892384, 0.80434466, 0.81976549, 0.83518631, 0.85060713, 0.86602796,
                        0.88144878, 0.8968696 , 0.91229042, 0.92771125, 0.94313207, 0.95855289]),
            'y': np.array([57611.46744981, 57704.35521989, 57659.8984254 , 57489.98989066,
                        57206.52243993, 56821.38889751, 56346.48208769, 55793.69483476,
                        55174.91996299, 54502.05029669, 53786.97866013, 53041.59787761,
                        52277.59397171, 51498.61354892, 50697.85972984, 49867.83767937,
                        49001.05256236, 48090.00954371, 47127.34864573, 46107.72775764,
                        45027.35812664, 43882.49095765, 42669.37745563, 41384.26882551,
                        40023.41627224, 38583.07100075, 37059.48421598, 35448.90712288,
                        33747.59092639, 31951.78683144])
        }
    )
    # fmt: on
    fig = new_imp3.head_plot()
    for exp_data, act_data in zip(expected_data, fig.data):
        assert exp_data["name"] == act_data["name"]
        assert_allclose(exp_data["x"], act_data["x"])
        assert_allclose(exp_data["y"], act_data["y"])


def test_conversion_same_speed(imp3):
    new_suc = ccp.State(p=Q_(2000, "kPa"), T=300, fluid={"co2": 1})
    new_imp3 = ccp.Impeller.convert_from(imp3, suc=new_suc, speed="same")

    # fmt: off
    expected_data = (
        {
            'name': '9300.0 RPM',
            'x': np.array([0.68046792, 0.70009285, 0.71971779, 0.73934273, 0.75896767, 0.7785926 ,
                        0.79821754, 0.81784248, 0.83746742, 0.85709235, 0.87671729, 0.89634223,
                        0.91596717, 0.9355921 , 0.95521704, 0.97484198, 0.99446691, 1.01409185,
                        1.03371679, 1.05334173, 1.07296666, 1.0925916 , 1.11221654, 1.13184148,
                        1.15146641, 1.17109135, 1.19071629, 1.21034123, 1.22996616, 1.2495911 ]),
            'y': np.array([87116.83399715, 87154.83183997, 87047.33649838, 86802.60457452,
                        86428.89267047, 85934.45738838, 85327.55533033, 84616.44309846,
                        83809.37729487, 82914.61452168, 81940.411381  , 80895.02447494,
                        79786.61163076, 78619.49080308, 77392.99181615, 76106.11112906,
                        74757.84520091, 73347.19049081, 71873.01754214, 70332.31282623,
                        68720.612452  , 67033.41522001, 65266.21993083, 63414.525385  ,
                        61473.83038311, 59439.63372569, 57307.43421333, 55072.73064657,
                        52731.02182598, 50277.80655213])
        },
        {
            'name': '10463.0 RPM',
            'x': np.array([0.76913476, 0.79096386, 0.81279296, 0.83462206, 0.85645116, 0.87828026,
                        0.90010936, 0.92193846, 0.94376756, 0.96559666, 0.98742576, 1.00925486,
                        1.03108396, 1.05291306, 1.07474216, 1.09657126, 1.11840036, 1.14022946,
                        1.16205856, 1.18388766, 1.20571676, 1.22754586, 1.24937496, 1.27120406,
                        1.29303316, 1.31486226, 1.33669136, 1.35852046, 1.38034956, 1.40217866]),
            'y': np.array([100950.79219283, 100961.00384944, 100820.29873773, 100535.58599547,
                        100113.77476042,  99561.77417033,  98886.49336298,  98094.84147612,
                        97193.7276475 ,  96190.0610149 ,  95090.75071607,  93902.70588877,
                        92632.78042029,  91285.68033578,  89863.32151146,  88367.43335326,
                        86799.74526705,  85161.98665874,  83455.65203635,  81678.72113956,
                        79826.46803243,  77894.09717967,  75876.81304596,  73769.82009601,
                        71568.3227945 ,  69267.52560614,  66862.63299561,  64348.84942761,
                        61721.37936684,  58975.42727798])
        },
        {
            'name': '11373.0 RPM',
            'x': np.array([0.83851295, 0.86206672, 0.88562049, 0.90917425, 0.93272802, 0.95628179,
                        0.97983555, 1.00338932, 1.02694309, 1.05049686, 1.07405062, 1.09760439,
                        1.12115816, 1.14471192, 1.16826569, 1.19181946, 1.21537323, 1.23892699,
                        1.26248076, 1.28603453, 1.30958829, 1.33314206, 1.35669583, 1.3802496 ,
                        1.40380336, 1.42735713, 1.4509109 , 1.47446466, 1.49801843, 1.5215722 ]),
            'y': np.array([111298.24438344, 111287.22094032, 111120.80806118, 110804.98204051,
                        110345.71917282, 109748.99575259, 109020.78807433, 108167.07243253,
                        107193.82512168, 106107.02243629, 104912.64067085, 103616.65611985,
                        102225.02105758, 100742.75397225,  99173.66033098,  97521.46453263,
                        95789.89097607,  93982.66406017,  92103.19473964,  90150.20391573,
                        88118.8020773 ,  86004.00684083,  83800.83582284,  81504.30663981,
                        79109.43690824,  76611.24424464,  74004.74626549,  71284.9605873 ,
                        68446.90482657,  65485.59659979])
        }
    )
    # fmt: on
    fig = new_imp3.head_plot()
    for exp_data, act_data in zip(expected_data, fig.data):
        assert exp_data["name"] == act_data["name"]
        assert_allclose(exp_data["x"], act_data["x"])
        assert_allclose(exp_data["y"], act_data["y"])


def test_impeller_from_head_power(imp3):
    power_curves = {
        "9300": {
            "x1": [
                0.6687254072219386,
                0.7814575495418031,
                0.8941896918616675,
                1.0069218341815322,
                1.1196539765013964,
                1.2323861188212613,
            ],
            "x2": [
                2845523.5289321193,
                3127163.481562522,
                3277265.886285639,
                3346260.869968239,
                3319180.7261240287,
                3142302.6300651073,
            ],
            "x3": 0,
        },
        "10463": {
            "x1": [
                0.7519675035883937,
                0.8855457880957917,
                1.0191240726031896,
                1.1527023571105877,
                1.2862806416179855,
                1.4198589261253836,
            ],
            "x2": [
                4039983.5025886875,
                4470035.337140464,
                4679947.907538627,
                4766159.261322699,
                4692484.023962905,
                4371204.02452897,
            ],
            "x3": 0,
        },
        "11373": {
            "x1": [
                0.8212056071200831,
                0.9648438318896764,
                1.1084820566592695,
                1.2521202814288628,
                1.3957585061984559,
                1.5393967309680492,
            ],
            "x2": [
                5186828.999320385,
                5736177.6673671715,
                6014264.5749985445,
                6112605.998368464,
                6014767.215796105,
                5638319.478855415,
            ],
            "x3": 0,
        },
    }
    head_curves = {
        "9300": {
            "x1": [
                0.6687254072219386,
                0.7814575495418031,
                0.8941896918616675,
                1.0069218341815322,
                1.1196539765013964,
                1.2323861188212613,
            ],
            "x2": [
                100005.53018307277,
                97847.01562084591,
                91329.28298253928,
                83829.8663013647,
                73474.29567438488,
                58862.99999999999,
            ],
            "x3": 0,
        },
        "10463": {
            "x1": [
                0.7519675035883937,
                0.8855457880957917,
                1.0191240726031896,
                1.1527023571105877,
                1.2862806416179855,
                1.4198589261253836,
            ],
            "x2": [
                126268.4360992984,
                123591.84090157163,
                114656.18023528619,
                104172.92098119784,
                89712.83917676227,
                68994.16001570634,
            ],
            "x3": 0,
        },
        "11373": {
            "x1": [
                0.8212056071200831,
                0.9648438318896764,
                1.1084820566592695,
                1.2521202814288628,
                1.3957585061984559,
                1.5393967309680492,
            ],
            "x2": [
                148586.0,
                145585.48779110302,
                135621.6175049271,
                123053.00341798295,
                106048.3388840925,
                82407.00000000001,
            ],
            "x3": 0,
        },
    }

    imp = Impeller.load_from_dict(
        suc=imp3.points[0].suc,
        b=imp3.points[0].b,
        D=imp3.points[0].D,
        head_curves=head_curves,
        power_curves=power_curves,
        number_of_points=6,
        flow_units="m³/s",
        head_units="J/kg",
    )

    assert_allclose(imp.head, imp3.head)
    assert_allclose(imp.power, imp3.power)
    assert_allclose(imp.eff, imp3.eff)


def test_impeller_curve():
    imp = impeller_example()
    c0 = imp.curve(speed=900)
    p0 = c0[0]
    assert_allclose(p0.eff, 0.821433, rtol=1e-4)
    assert_allclose(p0.head, 137188.459805, rtol=1e-4)
    assert_allclose(p0.power, 2959311.563661, rtol=1e-4)


def test_impeller_plot():
    imp = impeller_example()
    fig = imp.eff_plot(flow_v=5, speed=900)
    expected_eff_curve = np.array(
        [
            0.82151127,
            0.82251957,
            0.82336076,
            0.82403621,
            0.8245473,
            0.82489539,
            0.82508188,
            0.82510812,
            0.82497549,
            0.82468537,
            0.82423886,
            0.82362078,
            0.82279067,
            0.82170594,
            0.82032399,
            0.81860513,
            0.81657752,
            0.81433706,
            0.81198262,
            0.80961307,
            0.8072946,
            0.80471372,
            0.80131193,
            0.79652665,
            0.78979533,
            0.78055539,
            0.76824427,
            0.75229938,
            0.73215817,
            0.70725806,
        ]
    )
    assert_allclose(fig.data[5]["y"], expected_eff_curve, rtol=1e-4)
    assert_allclose(fig.data[6]["y"], 0.8160188823236803, rtol=1e-4)


def test_impeller_plot_units():
    imp = impeller_example()
    fig = imp.disch.rho_plot(
        flow_v=Q_(20000, "m³/h"),
        speed=Q_(8594, "RPM"),
        flow_v_units="m³/h",
        speed_units="RPM",
        rho_units="g/cm³",
    )
    expected_rho_curve = np.array(
        [
            0.0110496,
            0.01102181,
            0.010993,
            0.01096256,
            0.01092986,
            0.0108943,
            0.01085524,
            0.01081207,
            0.01076418,
            0.01071094,
            0.01065174,
            0.01058664,
            0.01051667,
            0.01044299,
            0.01036672,
            0.01028899,
            0.01021019,
            0.01013007,
            0.01004829,
            0.00996457,
            0.00987832,
            0.00978584,
            0.00968141,
            0.00955927,
            0.00941368,
            0.00923886,
            0.00902908,
            0.00877857,
            0.00848159,
            0.00813238,
        ]
    )
    assert_allclose(fig.data[5]["y"], expected_rho_curve, rtol=1e-4)
    assert_allclose(fig.data[6]["y"], 0.008981, rtol=1e-4)


def test_save_load():
    composition_fd = dict(
        n2=0.4,
        co2=0.22,
        methane=92.11,
        ethane=4.94,
        propane=1.71,
        ibutane=0.24,
        butane=0.3,
        ipentane=0.04,
        pentane=0.03,
        hexane=0.01,
    )
    suc_fd = State(p=Q_(3876, "kPa"), T=Q_(11, "degC"), fluid=composition_fd)

    test_dir = Path(__file__).parent
    curve_path = test_dir / "data"
    curve_name = "normal"

    imp_fd = Impeller.load_from_engauge_csv(
        suc=suc_fd,
        curve_name=curve_name,
        curve_path=curve_path,
        b=Q_(10.6, "mm"),
        D=Q_(390, "mm"),
        number_of_points=6,
        flow_units="kg/h",
        head_units="kJ/kg",
    )
    file = Path(tempdir) / "imp.toml"
    imp_fd.save(file)

    imp_fd_loaded = Impeller.load(file)

    assert imp_fd == imp_fd_loaded


def test_load_from_dict_isis():
    head_curves_dict = {
        "CURVES": [
            {
                "z": 11373,
                "points": [
                    {"x": 94529, "y": 148.586},
                    {"x": 98641, "y": 148.211},
                    {"x": 101554, "y": 147.837},
                    {"x": 105837, "y": 147.463},
                    {"x": 110120, "y": 145.967},
                    {"x": 114230, "y": 144.097},
                    {"x": 118167, "y": 141.479},
                    {"x": 130152, "y": 134.001},
                    {"x": 134089, "y": 131.384},
                    {"x": 138026, "y": 128.393},
                    {"x": 140080, "y": 126.523},
                    {"x": 144016, "y": 123.158},
                    {"x": 150177, "y": 117.176},
                    {"x": 153942, "y": 113.811},
                    {"x": 157705, "y": 109.698},
                    {"x": 160100, "y": 106.708},
                    {"x": 163693, "y": 102.595},
                    {"x": 167113, "y": 97.735},
                    {"x": 170190, "y": 92.875},
                    {"x": 173609, "y": 87.641},
                    {"x": 177200, "y": 82.407},
                ],
            },
            {
                "z": 10463,
                "points": [
                    {"x": 86421, "y": 126.284},
                    {"x": 90209, "y": 125.784},
                    {"x": 94492, "y": 125.036},
                    {"x": 98604, "y": 124.661},
                    {"x": 100146, "y": 124.287},
                    {"x": 104256, "y": 122.417},
                    {"x": 110077, "y": 118.678},
                    {"x": 114187, "y": 116.435},
                    {"x": 118125, "y": 114.191},
                    {"x": 122063, "y": 111.948},
                    {"x": 126172, "y": 109.33},
                    {"x": 130109, "y": 106.339},
                    {"x": 134045, "y": 102.974},
                    {"x": 137639, "y": 99.609},
                    {"x": 140206, "y": 97.366},
                    {"x": 143971, "y": 94.001},
                    {"x": 147907, "y": 89.888},
                    {"x": 150130, "y": 87.271},
                    {"x": 153722, "y": 82.411},
                    {"x": 156458, "y": 78.672},
                    {"x": 160049, "y": 73.812},
                    {"x": 163469, "y": 68.952},
                ],
            },
            {
                "z": 9300,
                "points": [
                    {"x": 76859, "y": 100.028},
                    {"x": 81085, "y": 99.245},
                    {"x": 85368, "y": 98.497},
                    {"x": 89309, "y": 98.122},
                    {"x": 90166, "y": 97.748},
                    {"x": 94276, "y": 96.252},
                    {"x": 98386, "y": 94.009},
                    {"x": 102152, "y": 91.765},
                    {"x": 106262, "y": 89.522},
                    {"x": 110200, "y": 87.278},
                    {"x": 114310, "y": 85.035},
                    {"x": 118075, "y": 82.043},
                    {"x": 122184, "y": 79.052},
                    {"x": 126121, "y": 76.061},
                    {"x": 130056, "y": 72.322},
                    {"x": 133821, "y": 68.584},
                    {"x": 137241, "y": 64.097},
                    {"x": 141860, "y": 58.863},
                ],
            },
        ]
    }

    eff_curves_dict = {
        "CURVES": [
            {
                "z": 11373,
                "points": [
                    {"x": 94088, "y": 0.7515},
                    {"x": 97345, "y": 0.757113},
                    {"x": 104205, "y": 0.771707},
                    {"x": 107462, "y": 0.777695},
                    {"x": 110718, "y": 0.78256},
                    {"x": 114315, "y": 0.786678},
                    {"x": 117570, "y": 0.789673},
                    {"x": 121508, "y": 0.792669},
                    {"x": 134869, "y": 0.805772},
                    {"x": 138805, "y": 0.806898},
                    {"x": 142741, "y": 0.806527},
                    {"x": 145648, "y": 0.805033},
                    {"x": 149581, "y": 0.802044},
                    {"x": 150094, "y": 0.80167},
                    {"x": 153854, "y": 0.797933},
                    {"x": 157443, "y": 0.793073},
                    {"x": 160005, "y": 0.788213},
                    {"x": 162907, "y": 0.781856},
                    {"x": 165295, "y": 0.774377},
                    {"x": 167001, "y": 0.768768},
                    {"x": 169046, "y": 0.76054},
                    {"x": 172792, "y": 0.742214},
                    {"x": 174494, "y": 0.733613},
                    {"x": 177637, "y": 0.717055},
                ],
            },
            {
                "z": 10463,
                "points": [
                    {"x": 86559, "y": 0.751493},
                    {"x": 89817, "y": 0.757855},
                    {"x": 92732, "y": 0.764216},
                    {"x": 95820, "y": 0.7717},
                    {"x": 98735, "y": 0.777688},
                    {"x": 100449, "y": 0.780681},
                    {"x": 104047, "y": 0.785547},
                    {"x": 107815, "y": 0.788917},
                    {"x": 113125, "y": 0.793784},
                    {"x": 116894, "y": 0.797902},
                    {"x": 122375, "y": 0.803517},
                    {"x": 126484, "y": 0.805765},
                    {"x": 130591, "y": 0.806143},
                    {"x": 135295, "y": 0.804089},
                    {"x": 137945, "y": 0.801847},
                    {"x": 139654, "y": 0.800165},
                    {"x": 143243, "y": 0.79568},
                    {"x": 147000, "y": 0.788576},
                    {"x": 149903, "y": 0.781845},
                    {"x": 152120, "y": 0.774366},
                    {"x": 154761, "y": 0.763521},
                    {"x": 157570, "y": 0.749683},
                    {"x": 159016, "y": 0.740894},
                    {"x": 163440, "y": 0.716584},
                ],
            },
            {
                "z": 9300,
                "points": [
                    {"x": 76977, "y": 0.751485},
                    {"x": 79892, "y": 0.757847},
                    {"x": 80235, "y": 0.758595},
                    {"x": 82809, "y": 0.765704},
                    {"x": 85211, "y": 0.771691},
                    {"x": 87955, "y": 0.778427},
                    {"x": 90184, "y": 0.782169},
                    {"x": 93782, "y": 0.786661},
                    {"x": 97550, "y": 0.790404},
                    {"x": 101319, "y": 0.794522},
                    {"x": 104746, "y": 0.799388},
                    {"x": 110228, "y": 0.805751},
                    {"x": 114336, "y": 0.806877},
                    {"x": 118441, "y": 0.805384},
                    {"x": 124083, "y": 0.800339},
                    {"x": 127500, "y": 0.795105},
                    {"x": 132110, "y": 0.78501},
                    {"x": 136884, "y": 0.767994},
                    {"x": 138586, "y": 0.759392},
                    {"x": 140456, "y": 0.747424},
                    {"x": 141816, "y": 0.738448},
                    {"x": 145226, "y": 0.716758},
                ],
            },
        ]
    }

    composition_fd = dict(
        n2=0.4,
        co2=0.22,
        methane=92.11,
        ethane=4.94,
        propane=1.71,
        ibutane=0.24,
        butane=0.3,
        ipentane=0.04,
        pentane=0.03,
        hexane=0.01,
    )
    suc_fd = State(p=Q_(3876, "kPa"), T=Q_(11, "degC"), fluid=composition_fd)

    imp = ccp.Impeller.load_from_dict_isis(
        suc=suc_fd,
        head_curves=head_curves_dict,
        eff_curves=eff_curves_dict,
        b=Q_(10.6, "mm"),
        D=Q_(390, "mm"),
        number_of_points=6,
        flow_units="kg/h",
        head_units="kJ/kg",
    )
    p0 = imp.point(flow_m=Q_(90184, "kg/h"), speed=Q_(9300, "RPM"))
    assert_allclose(p0.eff, 0.782169, rtol=1e-4)
    assert_allclose(p0.head, 97729.49349, rtol=1e-4)
    assert_allclose(p0.power, 3130330.074989, rtol=1e-4)


def test_pickle(imp0):
    pickled_imp0 = pickle.loads(pickle.dumps(imp0))
    assert pickled_imp0 == imp0
    assert hasattr(imp0, "head_plot") is True
    assert hasattr(pickled_imp0, "head_plot") is True
